{"version":3,"sources":["src/state.js","src/data.js","src/components/lightbox/index.js","src/components/search/index.js","src/index.js"],"names":["state","searchTerm","images","currentImage","setState","toSet","newValue","fetchImages","url","fetch","then","res","json","data","collection","items","catch","error","console","lightbox","markup","forEach","image","links","href","title","doSearch","event","preventDefault","term","document","getElementById","value","toLowerCase","length","alert","querySelector","insertAdjacentHTML","log","search","init","addEventListener"],"mappings":";AAYA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,WAAA,EARA,MAAMA,EAAQ,CACVC,WAAY,KACZC,OAAQ,KACRC,aAAc,MAKlB,QAAA,MAAA,EAAA,MAAMC,EAAW,CAACC,EAAOC,KACrBN,EAAMK,GAASC,GADnB,QAAA,SAAA;;ACFC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAVD,IAAA,EAAA,QAAA,WAEe,SAASC,IAEdC,MAAAA,0CAA8CR,EAAMC,MAAAA,8BAEnDQ,OAAAA,MAAMD,GACRE,KAAKC,GAAOA,EAAIC,QAChBF,KAAKG,GAAQA,EAAKC,WAAWC,OAC7BC,MAAMC,GAASC,QAAQD,MAAMA;;;;ACIrC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAbD,IAAA,EAAA,QAAA,eAGe,SAASE,IAChBC,IAAAA,EAAU,yBAQPA,OAPDlB,EAAAA,MAAAA,OAAOmB,QAAQC,IACXd,MAAAA,EAAMc,EAAMC,MAAM,GAAGC,KACrBC,EAAQH,EAAMT,KAAK,GAAGY,MAC5BL,uCAA+CZ,WAAaiB,cAGhEL,GAAW,SAVf,QAAA;;AC8CC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAAA,QAAA,KAAA,EA/CD,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBA6CC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxCD,eAAeM,EAASC,GAIpBA,EAAMC,iBAEAC,MAAAA,EAAOC,SAASC,eAAgB,gBAAeC,MAAMC,eACjD,EAAA,EAAA,UAAA,aAAaJ,GAEjB3B,MAAAA,QAAe,EAArB,EAAA,WAGGF,IAFM,EAAA,EAAA,UAAA,SAAUE,GAEQ,IAAxBF,EAAME,MAAAA,OAAOgC,OACZC,mCAAmCnC,EAAMC,MAAAA,gBAC/B,EAAA,EAAA,UAAA,aAAa,MACvB6B,SAASM,cAAe,iBAAgBJ,MAAQhC,EAAMC,MAAAA,eACnD,CACGmB,MAAAA,GAAS,EAAf,EAAA,WACAU,SAASM,cAAe,QAAOC,mBAAoB,YAAYjB,GAGnEF,QAAQoB,IAAItC,EAAME,MAAAA,QAIP,SAASqC,IACZ,MAAA,iSAWL,SAASC,IACGV,SAASM,cAAc,WAC/BK,iBAAiB,SAAUf,GA1CtC,QAAA;;ACQI,aAZJ,IAAA,EAAA,EAAA,QAAA,wBAYI,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EATJ,SAASc,IAECpB,MAAAA,GAAS,EAAf,EAAA,WAGAU,SAASM,cAAc,QAAQC,mBAAmB,YAAajB,IALnD,EAAA,EAAA,QAFhB,QAAA,eAWAoB","file":"src.884accfb.js","sourceRoot":"..","sourcesContent":["/**\n * This simple state management tool keeps data from being stored \n * in our HTML and makes for much simpler application. \n */\nconst state = {\n    searchTerm: null,\n    images: null,\n    currentImage: null\n}\n\n\n// update the state object with\nconst setState = (toSet, newValue) => {\n    state[toSet] = newValue;\n}\n\nexport { state, setState };","import {state} from \"./state\"; // when get an update from doSearch() file will also get an update here. Prevents having to pass around the search term as a parameter from one file to another.\n\nexport default function fetchImages() {\n    // get search term from state object\n    const url = `https://images-api.nasa.gov/search?q=${state.searchTerm}&media_type=image`;\n\n    return fetch(url)\n        .then(res => res.json())\n        .then(data => data.collection.items) // dont' need all the items of the api, only the collections\n        .catch(error => console.error(error));\n}","import { state } from \"../../state\";\nimport \"./index.css\";\n\nexport default function lightbox() {\n    let markup = `<div class=\"lightbox\">`;\n    state.images.forEach(image => {\n        const url = image.links[0].href;\n        const title = image.data[0].title;\n        markup +=  `<div class=\"thumbnail\"><img src=\"${url}\" alt=\"${title}\"></div>`;\n    });\n\n    markup += `</div>`;\n    return markup;\n}","import { state, setState } from \"../../state\";\nimport fetchImages from \"../../data\";\nimport lightbox from \"../lightbox\";\n\nimport \"./index.css\";\n\n// get the value from teh search field then log to the console\nasync function doSearch(event) {\n\n    // prevent default of search to happen\n    // event is just the event handler object\n    event.preventDefault();\n\n    const term = document.getElementById(`search-field`).value.toLowerCase();\n    setState(`searchTerm`, term);\n\n    const images = await fetchImages();\n    setState('images', images);\n\n    if(state.images.length === 0){\n        alert(`There are no results for \"${state.searchTerm}\"`);\n        setState(`searchTerm`, null);\n        document.querySelector(`#search-field`).value = state.searchTerm;\n    } else {\n        const markup = lightbox();\n        document.querySelector(`#app`).insertAdjacentHTML(`beforeend`, markup);\n    }\n\n    console.log(state.images);\n}\n\n// default export\nexport default function search() {\n    return `\n    <h1>Search NASA Photos</h1>\n    <form name=\"search\" id=\"search\">\n        <p><label for=\"search-field\">Enter Search Term Below:</label></p>\n        <input id=\"search-field\" name=\"search\" type=\"search\">\n        <input type=\"submit\" id=\"submit\" value=\"Search\">\n    </form>\n    `;\n}\n\n// named export\nexport function init() {\n    const search = document.querySelector('#search');\n    search.addEventListener('submit', doSearch);\n}\n\n\n","import search, { init as initSearch } from \"./components/search\";\r\nimport \"./index.css\";\r\n\r\nfunction init() {\r\n    // import form and title and set to markup\r\n    const markup = search();\r\n\r\n    // add all markup to page\r\n    document.querySelector('#app').insertAdjacentHTML('beforeend', markup);\r\n    initSearch(); // initializes the search form \r\n}\r\n\r\ninit();\r\n"]}